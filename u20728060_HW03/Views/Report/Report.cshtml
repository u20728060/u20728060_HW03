
@{
    ViewBag.Title = "Report";
}

<script src="https://canvasjs.com/assets/script/canvasjs.min.js"></script>
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/1.3.2/jspdf.debug.js"></script>
<script src="https://unpkg.com/jspdf-autotable@3.5.13/dist/jspdf.plugin.autotable.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.0/xlsx.full.min.js"></script>

<style>
    body {
        background-image: url('../Content/Images/Report.jpeg');
        background-repeat:no-repeat;
        background-size:100%;
    }

    h3 {
        color: white
    }

    table {
        table-layout: fixed;
        width: 100%;
    }

    td, th {
        border: 1px solid black;
        text-align: center;
        padding: 8px;
        width: 25%;
    }

    tr:nth-child(even) {
        background-color: #84a98c;
    }

    tr:nth-child(odd) {
        background-color: #d8e2dc;
    }
</style>

<div class="container">
    <div class="row">
        <div class="col-md-6">
            <h3>Books Borrowed Report</h3>
            <table id="my-table" class="table table-striped">
                <tr>
                    <th>Book Name</th>
                    <th>Times Borrowed</th>

                </tr>
                @foreach (var item in ViewBag.ReportData.TableData)
                {
                    <tr>
                        <td>@item.BookName</td>
                        <td>@item.TimesBorrowed</td>

                    </tr>
                }
            </table>

        </div>
        <div class="col-md-6" style="padding-top:55px">
            <div id="my-chart" style="height: 300px; width: 100%;"></div>
        </div>
    </div>
</div>

<div style="background-color: #84a98c;padding-top: 10px;padding-bottom: 10px;padding-left: 5px; width:50%; border-radius:20px">
    <label for="fileName">File Name:</label>
    <input type="text" id="fileName" placeholder="Enter a file name">

    <label for="exportFormat">Export Format:</label>
    <select id="exportFormat">
        <option value="pdf">PDF</option>
        <option value="excel">Excel</option>
    </select>

    <button id="generate-report">Generate File</button>
</div>
<div class="row">
    <h3>Archive</h3>
    <table id="archives" class="table table-striped">
        <thead>
            <tr>
                <th>File</th>
                <th>Download file</th>
                <th>Delete file</th>
            </tr>
        </thead>
        <tbody>

        </tbody>
    </table>
</div>


@section scripts{
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.js"></script>

    <script type="text/javascript">


    $(function () {
    var chartData = @Html.Raw(Json.Encode(ViewBag.ReportData.ChartData));

    var dataPoints = chartData.map(item => {
    return {
    label: item.Label,
    y: item.Y,
    legendText: item.Label
    };
    });

        console.log(dataPoints);

    var chart = new CanvasJS.Chart("my-chart", {
    title: {
    text: "Most popular books borrowed for November 2015"
    },
    animationEnabled: true,
    legend: {
    fontSize: 20,
    fontFamily: "Helvetica"
    },
    theme: "light2",
    data: [
    {
    type: "doughnut",
    indexLabelFontFamily: "Garamond",
    indexLabelFontSize: 20,
    indexLabel: "{label} {y}%",
    startAngle: -20,
    showInLegend: true,
    toolTipContent: "{legendText} {y}%",
    dataPoints: dataPoints
    }
    ]
    });

    chart.render();
    });


        document.getElementById('generate-report').addEventListener('click', function () {
            const fileName = document.getElementById('fileName').value;
            const exportFormat = document.getElementById('exportFormat').value;

            if (exportFormat === 'pdf') {
                const doc = new jsPDF();
                const table = document.getElementById('my-table');
                doc.autoTable({ html: table });

                const reportText = [
                    "The above report shows the books that were borrowed from the library more than 10 times in the month of November 2015.",
                    "The books include:",
                    "1 The Master of Ballantrae",
                    "2 Sonny: A Christmas Guest",
                    "3 Book Of Indian Braves",
                    "4 The Real Mother Goose",
                    "5 Broken Ties",
                    "6 Molly Make-Believe"
                ];	

                doc.text(10, 220, reportText);

                doc.save(fileName + '.pdf');
                const downloadedPdfs = JSON.parse(localStorage.getItem('archives')) || [];
                downloadedPdfs.push(fileName + '.pdf');
                localStorage.setItem('archives', JSON.stringify(downloadedPdfs));

                populateArchives();
            } else if (exportFormat === 'excel') {
                // Save the report as Excel
                // Include code to create and save the Excel file
            }

            //function addGraph() {
            //    const graphImage = ctx.canvas.toDataURL('image/jpeg', 1.0);
            //    doc.addImage(graphImage, 'JPEG', 10, 100, 190, 100);
            //}
        });

        function populateArchives() {
            const downloadedPdfs = JSON.parse(localStorage.getItem('archives')) || [];
            const downloadedPdfsTable = document.getElementById('archives').querySelector('tbody');

			downloadedPdfsTable.innerHTML = '';

			downloadedPdfs.forEach(fileName => {
				const row = downloadedPdfsTable.insertRow();

				const fileNameCell = row.insertCell(0);
				fileNameCell.textContent = fileName;

				const downloadButtonCell = row.insertCell(1);
				const downloadButton = document.createElement('button');
				downloadButton.textContent = 'Download';
				downloadButton.setAttribute('data-fileName', fileName);
				downloadButton.onclick = function () {
					const fileName = downloadButton.getAttribute('data-fileName');
					const downloadLink = document.createElement('a');
					downloadLink.href = '@Url.Action("downloads", "Report", new { fileName = "" })' + fileName;
					downloadLink.download = fileName;
					downloadLink.style.display = 'none';
					document.body.appendChild(downloadLink);
					downloadLink.click();
					document.body.removeChild(downloadLink);
				};
				downloadButtonCell.appendChild(downloadButton);

				const deleteButtonCell = row.insertCell(2);
				const deleteButton = document.createElement('button');
				deleteButton.textContent = 'Delete';
				deleteButton.onclick = function () {
					// Add the logic to delete the PDF file here
					const index = downloadedPdfs.indexOf(fileName);
					if (index !== -1) {
						downloadedPdfs.splice(index, 1);
                        localStorage.setItem('archives', JSON.stringify(downloadedPdfs));
						// Remove the table row from the view
						row.remove();
					}
				};
				deleteButtonCell.appendChild(deleteButton);
			});
		}
        populateArchives();

       

    </script>
}

